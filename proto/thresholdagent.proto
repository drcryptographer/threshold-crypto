syntax = "proto3";

package thresholdagent;

option go_package = "github.com/clover-network/threshold-crypto/thresholdagent";
import "google/protobuf/timestamp.proto";


enum Status {
  UNKNOWN = 0;
  SUCCEEDED = 1;
  DENIED = 2;
  FAILED = 3;
}

enum SignatureType {
  SCHNORRv1 = 0; //bitcoin schnorr
  SCHNORRv2 = 1; //ethereum schnorr
  ECDSAv1 = 2; //bitcoin ecdsa
  ECDSAv2 = 3; //ethereum ecdsa
}

message SchnorrRound0Msg {
  string SessionId = 1;
  SignatureType  sType = 2;
  repeated bytes signerCerts = 3;
  oneof request {
    int32 threshold = 4; //for keygen
    SignRequest signing = 5; //for sign
  }
}
message SignRequest {
  bytes publicKey = 1;
  bytes message = 2;
}

message SchnorrRound1Msg {
  string SessionId = 1;
  int32  SenderId = 2;
  bytes  Commitment = 3;
}

message SchnorrRound2Msg {
  string SessionId = 1;
  int32  SenderId = 2;
  int32  ReceiverId = 3;
  bytes  ShareKey = 4;
  bytes  SimulatedShareKey = 5;
  bytes  Poly = 6;
}


message SchnorrRound3Msg {
  string SessionId = 1;
  int32  SenderId = 2;
  oneof Data {
    bytes  PublicKey = 3;
    bytes  SigmaI = 4;
  }
}

message AuthRequest{
  string sessionId = 1;
  bytes challenge = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message AuthResponse{
  string sessionId = 1;
  bytes signatureR = 2;
  bytes signatureS = 3;
  bytes certificate = 4;
}

message SchnorrSignature {
  SignatureType sType = 1;
  bytes compressedPublicKey = 2;
  bytes signingData = 3;
  bytes R = 4;
  bytes S = 5;
}

message SchnorrRound1MsgList {
  repeated SchnorrRound1Msg messages = 1;
}
message SchnorrRound2MsgList {
  repeated SchnorrRound2Msg messages = 1;
}
message SchnorrRound3MsgList {
  repeated SchnorrRound3Msg messages = 1;
}

message ResultMsg {
  string SessionId = 1;
  Status status = 2;
}


message EcdsaRoundMessage {
  string SessionId = 1;
  int32  SenderId = 2;
  int32  ReceiverId = 3;
  int32 Round = 4;
  bytes Data = 5;
}

service ThresholdAgent {
  rpc Authenticate(AuthRequest) returns (AuthResponse) {}

  rpc DkgSchnorrRound1(SchnorrRound0Msg) returns (SchnorrRound1Msg) {}
  rpc DkgSchnorrRound2(SchnorrRound1MsgList) returns (SchnorrRound2MsgList) {}
  rpc DkgSchnorrRound3(SchnorrRound2MsgList) returns (SchnorrRound3Msg) {}
  rpc DkgSchnorrRoundFinal(ResultMsg) returns (ResultMsg) {}

  rpc SchnorrSignRound1(SchnorrRound0Msg) returns (SchnorrRound1Msg) {}
  rpc SchnorrSignRound2(SchnorrRound1MsgList) returns (SchnorrRound2MsgList) {}
  rpc SchnorrSignRound3(SchnorrRound2MsgList) returns (SchnorrRound3Msg) {}
  rpc SchnorrSignRound4(SchnorrRound3MsgList) returns (SchnorrSignature) {}

  rpc EcdsaDkgRoundX(EcdsaRoundMessage) returns (EcdsaRoundMessage) {}
  rpc EcdsaSignRoundX(EcdsaRoundMessage) returns (EcdsaRoundMessage) {}

}
